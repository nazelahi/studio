-- Full database schema for the RentFlow application

-- Drop existing tables in reverse order of dependency to avoid errors on re-run
DROP TABLE IF EXISTS "public"."work_details";
DROP TABLE IF EXISTS "public"."notices";
DROP TABLE IF EXISTS "public"."zakat_bank_details";
DROP TABLE IF EXISTS "public"."zakat_transactions";
DROP TABLE IF EXISTS "public"."deposits";
DROP TABLE IF EXISTS "public"."rent_entries";
DROP TABLE IF EXISTS "public"."expenses";
DROP TABLE IF EXISTS "public"."tenants";
DROP TABLE IF EXISTS "public"."property_settings";

-- 1. Property Settings Table
-- Stores global settings for the property
CREATE TABLE "public"."property_settings" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "house_name" text NOT NULL,
    "house_address" text NOT NULL,
    "bank_name" text NOT NULL,
    "bank_account_number" text NOT NULL,
    "bank_logo_url" text,
    "owner_name" text,
    "owner_photo_url" text,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT property_settings_pkey PRIMARY KEY (id)
);

-- Seed the settings table with a default row
INSERT INTO "public"."property_settings" (id, house_name, house_address, bank_name, bank_account_number)
VALUES (1, 'My Property', '123 Main St, Anytown', 'Default Bank', '000-000-000');


-- 2. Tenants Table
-- Stores information about each tenant
CREATE TABLE "public"."tenants" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "name" text NOT NULL,
    "email" text NOT NULL,
    "phone" text,
    "property" text NOT NULL,
    "rent" numeric NOT NULL,
    "join_date" date NOT NULL,
    "notes" text,
    "status" text CHECK (status IN ('Paid', 'Active', 'Overdue')) NOT NULL,
    "avatar" text NOT NULL,
    "type" text,
    "documents" text[],
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT tenants_pkey PRIMARY KEY (id)
);

-- 3. Expenses Table
-- Stores all property-related expenses
CREATE TABLE "public"."expenses" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "date" date NOT NULL,
    "category" text NOT NULL,
    "amount" numeric NOT NULL,
    "description" text NOT NULL,
    "status" text CHECK (status IN ('Paid', 'Due')) NOT NULL,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT expenses_pkey PRIMARY KEY (id)
);

-- 4. Rent Entries Table
-- Tracks monthly rent payments for each tenant
CREATE TABLE "public"."rent_entries" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "tenant_id" uuid REFERENCES public.tenants(id) ON DELETE CASCADE,
    "name" text NOT NULL,
    "property" text NOT NULL,
    "rent" numeric NOT NULL,
    "due_date" date NOT NULL,
    "status" text CHECK (status IN ('Paid', 'Pending', 'Overdue')) NOT NULL,
    "avatar" text NOT NULL,
    "year" integer NOT NULL,
    "month" integer NOT NULL,
    "payment_date" date,
    "collected_by" text,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT rent_entries_pkey PRIMARY KEY (id)
);

-- 5. Deposits Table
-- Logs bank deposits for each month's net income
CREATE TABLE "public"."deposits" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "year" integer NOT NULL,
    "month" integer NOT NULL,
    "amount" numeric NOT NULL,
    "deposit_date" date NOT NULL,
    "receipt_url" text,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT deposits_pkey PRIMARY KEY (id),
    CONSTRAINT deposits_year_month_key UNIQUE (year, month)
);

-- 6. Notices Table
-- Stores monthly notices for tenants
CREATE TABLE "public"."notices" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "year" integer NOT NULL,
    "month" integer NOT NULL,
    "content" text NOT NULL,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT notices_pkey PRIMARY KEY (id),
    CONSTRAINT notices_year_month_key UNIQUE (year, month)
);

-- 7. Zakat Transactions Table
-- Tracks inflow and outflow of Zakat funds
CREATE TABLE "public"."zakat_transactions" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "transaction_date" date NOT NULL,
    "type" text CHECK (type IN ('inflow', 'outflow')) NOT NULL,
    "amount" numeric NOT NULL,
    "source_or_recipient" text NOT NULL,
    "description" text,
    "receipt_url" text,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT zakat_transactions_pkey PRIMARY KEY (id)
);

-- 8. Zakat Bank Details Table
-- Stores bank account information for Zakat donations
CREATE TABLE "public"."zakat_bank_details" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "bank_name" text NOT NULL,
    "account_number" text NOT NULL,
    "account_holder" text,
    "logo_url" text,
    "location" text,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT zakat_bank_details_pkey PRIMARY KEY (id)
);


-- 9. Work Details Table
-- Tracks maintenance, repairs, and other jobs
CREATE TABLE "public"."work_details" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "title" text NOT NULL,
    "description" text,
    "category" text,
    "status" text CHECK (status IN ('To Do', 'In Progress', 'Completed')) NOT NULL,
    "assigned_to_id" uuid,
    "product_cost" numeric,
    "worker_cost" numeric,
    "due_date" date,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT work_details_pkey PRIMARY KEY (id)
);


-- POLICIES (Row Level Security)

-- Generic function to check for admin role
CREATE OR REPLACE FUNCTION is_admin()
RETURNS boolean AS $$
BEGIN
    RETURN (auth.role() = 'service_role');
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- Policies for 'property_settings'
ALTER TABLE "public"."property_settings" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."property_settings" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."property_settings" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Policies for 'tenants'
ALTER TABLE "public"."tenants" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."tenants" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."tenants" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Policies for 'expenses'
ALTER TABLE "public"."expenses" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."expenses" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."expenses" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Policies for 'rent_entries'
ALTER TABLE "public"."rent_entries" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."rent_entries" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."rent_entries" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Policies for 'deposits'
ALTER TABLE "public"."deposits" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."deposits" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."deposits" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Policies for 'notices'
ALTER TABLE "public"."notices" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."notices" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."notices" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Policies for 'zakat_transactions'
ALTER TABLE "public"."zakat_transactions" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."zakat_transactions" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."zakat_transactions" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Policies for 'zakat_bank_details'
ALTER TABLE "public"."zakat_bank_details" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."zakat_bank_details" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."zakat_bank_details" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- Policies for 'work_details'
ALTER TABLE "public"."work_details" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON "public"."work_details" FOR SELECT USING (true);
CREATE POLICY "Allow admin write access" ON "public"."work_details" FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- STORAGE BUCKETS POLICIES
-- Policies for 'deposit-receipts' bucket
CREATE POLICY "Allow public read on deposit receipts" ON storage.objects FOR SELECT USING (bucket_id = 'deposit-receipts');
CREATE POLICY "Allow admin write on deposit receipts" ON storage.objects FOR ALL USING (bucket_id = 'deposit-receipts' AND is_admin());

-- Policies for 'tenant-documents' bucket
CREATE POLICY "Allow public read on tenant documents" ON storage.objects FOR SELECT USING (bucket_id = 'tenant-documents');
CREATE POLICY "Allow admin write on tenant documents" ON storage.objects FOR ALL USING (bucket_id = 'tenant-documents' AND is_admin());

-- Policies for 'zakat-receipts' bucket
CREATE POLICY "Allow public read on zakat receipts" ON storage.objects FOR SELECT USING (bucket_id = 'zakat-receipts');
CREATE POLICY "Allow admin write on zakat receipts" ON storage.objects FOR ALL USING (bucket_id = 'zakat-receipts' AND is_admin());
