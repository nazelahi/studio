-- Drop the table if it exists to start fresh, useful for development.
-- Be cautious with this in production.
drop table if exists public.property_settings;

-- Create the property_settings table
create table public.property_settings (
    id bigint generated by default as identity primary key,
    house_name text not null,
    house_address text not null,
    bank_name text,
    bank_account_number text,
    bank_logo_url text,
    owner_name text,
    owner_photo_url text,
    created_at timestamp with time zone not null default now()
);

-- Insert a single row for the settings.
-- The application is designed to update this single row (where id = 1).
INSERT INTO public.property_settings (id, house_name, house_address, bank_name, bank_account_number, owner_name)
VALUES (1, 'Your Property Name', '123 Main Street, Anytown', 'Default Bank', '000-000-0000', 'Default Owner');


-- Enable Row Level Security (RLS) for the table.
-- This is a crucial security step in Supabase.
alter table public.property_settings enable row level security;

-- Create policies for property_settings table.

-- Policy: Allow public, anonymous read access to everyone.
-- This ensures that even logged-out users can see the property details.
create policy "Allow public read access" on public.property_settings
as permissive for select
to public
using (true);

-- Policy: Allow authenticated users (admins) to update the settings.
-- This restricts modification rights to those who are logged in.
create policy "Allow admin users to update" on public.property_settings
as permissive for update
to authenticated
using (true)
with check (true);

-- Note: By default, no one can insert or delete.
-- This is the desired behavior for a settings table that should only have one row.
